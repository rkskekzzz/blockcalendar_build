version: '3'
services:
  mongo:
    container_name: mongo
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: calendar
    ports:
      - '27017:27017'
    volumes:
      - ${MONGO_MOUNT_PATH}:/data/db
    networks:
      - service_network
    restart: always

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ${BACKEND_DOCKERFILE}
    depends_on:
      - mongo
    ports:
      - 5500:5500
    networks:
      - service_network
    restart: always

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ${FRONTEND_DOCKERFILE}
    networks:
      - service_network
    restart: always

  nginx-proxy:
    container_name: nginx-proxy
    depends_on:
      - mongo
      - backend
      - frontend
    image: nginx:latest
    ports:
      - '80:80'
      - '433:433'
    expose:
      - '80'
      - '443'
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ../certbot/conf:/etc/letsencrypt # 추가
      - ../certbot/www:/var/www/certbot # 추가
    restart: always
    networks:
      - service_network

  certbot: # certbot 서비스 추가
    image: certbot/certbot
    container_name: certbot_service
    volumes:
      - ../certbot/conf:/etc/letsencrypt
      - ../certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  service_network:
    driver: bridge
